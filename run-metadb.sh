#!/bin/bash

LOGGING_ENABLED=0
ORIGINAL_METADB_RUN_MODE=$METADB_RUN_MODE

# Determine if we're logging or not
# TODO: Add Log Rotation functionality
if [ ! -z "$LOG_FILE_PATH" ]; then
  if [ ! -f "$LOG_FILE_PATH" ]; then
    touch "$LOG_FILE_PATH"
    echo "[$(date +%F' '%T)] INFO: Initializing MetaDB Docker Edition." | tee -a "$LOG_FILE_PATH"
    if [ $? -ne 0 ]; then
      echo "[$(date +%F' '%T)] FATAL: Cannot write to log file at path ${LOG_FILE_PATH}!"
      exit 1
    fi
  else
    echo "" >> "$LOG_FILE_PATH"
    echo "[$(date +%F' '%T)] INFO: Initializing MetaDB Docker Edition." | tee -a "$LOG_FILE_PATH"
    if [ $? -ne 0 ]; then
      echo "[$(date +%F' '%T)] FATAL: Cannot write to log file at path ${LOG_FILE_PATH}!"
      exit 1
    fi
  fi

  LOGGING_ENABLED=1
fi

# Helper function for stdout and file logging
function log()
{
  STR="[$(date +%F' '%T)] $1"
  if [ $LOGGING_ENABLED -ne 0 ]; then
    echo $STR | tee -a "$LOG_FILE_PATH"
  else
    echo $STR
  fi
}

# Trap exit method in case of exit while running initial sync.
function clean_quit()
{
  log "INFO: Received exit signal, stopping MetaDB Instance."
  if [ -f "$DATA_DIR/metadb.pid" ]; then
    /usr/bin/metadb stop -D "$DATA_DIR"
  fi
  exit 0
}
trap clean_quit SIGHUP SIGINT SIGQUIT SIGABRT SIGTERM

#---------------
################
##Script Start##
################
#---------------
if [ "$VERBOSE_LOGGING" = "true" ]; then
  log "DEBUG: Testing if $DATA_DIR/metadb.conf exists"
fi

# Check if conf file exists, if not then create one with ENV variables
if [ ! -f "$DATA_DIR/metadb.conf" ]; then
  log "INFO: $DATA_DIR/metadb.conf does NOT exist, using BACKEND_ Envrionment Variables."
  mkdir -p "$DATA_DIR"
  touch "$DATA_DIR/metadb.conf"
  if [ $? -ne 0 ]; then
    log "ERROR: Could not write to $DATA_DIR/metadb.conf. Setting DATA_DIR to /etc/metadb."
    DATA_DIR="/etc/metadb"
    mkdir -p "$DATA_DIR"
    touch "$DATA_DIR/metadb.conf"
    if [ $? -ne 0 ]; then
      log "FATAL: Could not write to DATA_DIR nor /etc/metadb!"
      exit 1
    fi
  fi
  
  # Sanity check ENV variables
  if [ -z "$BACKEND_DB_HOST" ]; then
    log "FATAL: BACKEND_DB_HOST must be set, OR a valid metadb.conf must be mounted to ${DATA_DIR}/metadb.conf."
    exit 1
  fi
  if [ -z "$BACKEND_DB_PORT" ]; then
    log "WARN: BACKEND_DB_PORT is not set, defaulting to 5432."
    BACKEND_DB_PORT=5432
  fi
  if [ -z "$BACKEND_PG_DATABASE" ]; then
    log "WARN: BACKEND_PG_DATABASE is not set, defaulting to 'metadb'."
    BACKEND_PG_DATABASE="metadb"
  fi
  if [ -z "$BACKEND_PG_USER" ]; then
    log "WARN: BACKEND_PG_USER is not set, defaulting to 'metadb'."
    BACKEND_PG_USER="metadb"
  fi
  if [ -z "$BACKEND_PG_USER_PASSWORD" ]; then
    log "FATAL: BACKEND_PG_USER_PASSWORD must be set, OR a valid metadb.conf must be mounted to ${DATA_DIR}/metadb.conf."
    exit 1
  fi
  if [ -z "$BACKEND_PG_SSLMODE" ]; then
    log "WARN: BACKEND_PG_SSLMODE is not set, defaulting to 'prefer'."
    BACKEND_PG_SSLMODE="prefer"
  fi
  
  # Write out metadb.conf file
  if [ "$VERBOSE_LOGGING" = "true" ]; then
    log "DEBUG: Generated metadb.conf:"
    log "DEBUG: [main]"
    log "DEBUG: host = ${BACKEND_DB_HOST}"
    log "DEBUG: port = ${BACKEND_DB_PORT}"
    log "DEBUG: database = ${BACKEND_PG_DATABASE}"
    log "DEBUG: superuser = ${BACKEND_PG_SUPERUSER}"
    log "DEBUG: superuser_password = <redacted>"
    log "DEBUG: systemuser = ${BACKEND_PG_USER}"
    log "DEBUG: systemuser_password = <redacted>"
    log "DEBUG: sslmode = ${BACKEND_PG_SSLMODE}"
  fi
  
  echo "[main]
  host = $BACKEND_DB_HOST
  port = $BACKEND_DB_PORT
  database = $BACKEND_PG_DATABASE
  superuser = $BACKEND_PG_SUPERUSER
  superuser_password = $BACKEND_PG_SUPERUSER_PASSWORD
  systemuser = $BACKEND_PG_USER
  systemuser_password = $BACKEND_PG_USER_PASSWORD
  sslmode = $BACKEND_PG_SSLMODE" > "$DATA_DIR/metadb.conf"
  
  if [ $? -ne 0 ]; then
    log "FATAL: Failed to write autogenerated metadb.conf file to ${DATA_DIR}/metadb.conf!"
    exit 1
  fi
else
  if [ "$VERBOSE_LOGGING" = "true" ]; then
    log "DEBUG: Configuration detected at ${DATA_DIR}/metadb.conf. Running sanity checks."
  fi
# TODO: Read in existing config and make sure all required options are present
fi

# Make sure MetaDB doesn't accidentally run a task multiple times due to the container restarting unexpectedly.
if [ -f "$DATA_DIR/.error-flag" ]; then
  if [ "$METADB_RUN_MODE" = "start" ]; then
    if [ "$VERBOSE_LOGGING" = "true" ]; then
      log "DEBUG: ${DATA_DIR}/.error-flag detected but METADB_RUN_MODE is in 'start' state. Deleting .error-flag."
    fi
	
    rm -f "$DATA_DIR/.error-flag"
  else
    log "FATAL: MetaDB exited with an error with the METADB_RUN_MODE in a task-state (sync, endsync, upgrade). In order to prevent tasks from unintentionally running multiple times, this script will exit with an error code. To clear this error state, either delete the file at $DATA_DIR/.error-flag or start MetaDB with METADB_RUN_MODE set to 'start'."
    exit 1
  fi
fi

# Clear old PID file (if exists)
if [ -f "$DATA_DIR/metadb.pid" ]; then
  if [ "$VERBOSE_LOGGING" = "true" ]; then
    log "DEBUG: ${DATA_DIR}/metadb.pid detected upon start. Deleting metadb.pid."
  fi

  rm -f "$DATA_DIR/metadb.pid"
fi

#TODO: PICK UP FROM HERE
# Create Data Source Object if Initializing new MetaDB Instance
export PGPASSWORD=$BACKEND_PG_USER_PASSWORD
INIT_FLAG=$(psql -X -h $BACKEND_DB_HOST -d $BACKEND_PG_DATABASE -p $BACKEND_DB_PORT -U $BACKEND_PG_USER -c "SELECT COUNT(*) FROM metadb.source;" | grep row)
export PGPASSWORD=""

if [ $INIT_FLAG -eq 0 ]; then
  if [ "$VERBOSE_LOGGING" = "true" ]; then
    /usr/bin/metadb start -D "$DATA_DIR" -l "$LOG_FILE_PATH" --port $METADB_PORT --debug --memlimit $MEM_LIMIT_GB &
  fi
  if [ "$VERBOSE_LOGGING" = "false" ]; then
    /usr/bin/metadb start -D "$DATA_DIR" -l "$LOG_FILE_PATH" --port $METADB_PORT --memlimit $MEM_LIMIT_GB &
  fi
  sleep 5

  if [ -f "$SQL_INIT_SCRIPT_PATH" ]; then
    echo "Running SQL Init Script at $SQL_INIT_SCRIPT_PATH" >> "$LOG_FILE_PATH"
    psql -X -h localhost -d metadb -p $METADB_PORT -f "$SQL_INIT_SCRIPT_PATH"
  fi

  echo 'Registering Kafka Connector' >> "$LOG_FILE_PATH"

  if [[ "$ADD_SCHEMA_PREFIX" == *"_" ]] && ! [[ "$FOLIO_TENANT_NAME" == *"_" ]]; then
    FOLIO_TENANT_NAME="${FOLIO_TENANT_NAME}_"
  fi
  if ! [[ "$ADD_SCHEMA_PREFIX" == *"_" ]] && [[ "$FOLIO_TENANT_NAME" == *"_" ]]; then
    ADD_SCHEMA_PREFIX="${ADD_SCHEMA_PREFIX}_"
  fi

  psql -X -h localhost -d metadb -p $METADB_PORT -c "CREATE DATA SOURCE sensor TYPE kafka OPTIONS (brokers '$KAFKA_BROKERS', module 'folio', trimschemaprefix '$FOLIO_TENANT_NAME', topics '$KAFKA_TOPICS', consumergroup '$KAFKA_CONSUMER_GROUP', addschemaprefix '$ADD_SCHEMA_PREFIX', schemastopfilter '$SCHEMA_STOP_FILTER', security '$KAFKA_SECURITY');"
  echo 'Running initial synchronization with Kafka Connect sensor (this may take awhile). Once the sync is complete MetaDB will run with METADB_RUN_MODE set to "endsync".' >> "$LOG_FILE_PATH"
  
  INIT_SYNC_FLAG=0
  while [ $INIT_SYNC_FLAG -le 0 ]
  do
    INIT_SYNC_FLAG=$(cat "$LOG_FILE_PATH" | grep "snapshot complete" | wc -l)
    sleep 1
  done

  echo 'Initial snapshot completed' >> "$LOG_FILE_PATH"

  sudo -u metadb /usr/bin/metadb stop -D "$DATA_DIR"
  METADB_RUN_MODE="endsync"
fi

# Run MetaDB
if [ "$METADB_RUN_MODE" = "upgrade" ]; then
  if [ "$INIT_FLAG" = "true" ]; then
    echo 'ERROR: MetaDB is set to run in upgrade mode, but it is just now initializing? Change METADB_RUN_MODE to "start"' >> "$LOG_FILE_PATH"
    touch "$DATA_DIR/.error-flag"
    exit 1
  fi
  echo 'Starting MetaDB Upgrade Task (this may take awhile)' >> "$LOG_FILE_PATH"
  if [ "$FORCE_RUN" = "true" ]; then
    exec sudo -E -u metadb /usr/bin/metadb upgrade -D "$DATA_DIR" --force 2>&1 | cat >> "$LOG_FILE_PATH"
  else
    exec sudo -E -u metadb /usr/bin/metadb upgrade -D "$DATA_DIR" 2>&1 | cat >> "$LOG_FILE_PATH"
  fi
  echo 'MetaDB Upgrade Complete! Running MetaDB with METADB_RUN_MODE variable set to "start". Recommended to change the METADB_RUN_MODE variable value to "start" and restarting the container when convenient.' >> "$LOG_FILE_PATH"
  METADB_RUN_MODE="start"
fi

if [ "$METADB_RUN_MODE" = "sync" ]; then
  if [ "$INIT_FLAG" = "true" ]; then
    echo 'ERROR: MetaDB is set to run in sync mode, but it is just now initializing? Change METADB_RUN_MODE to "start"' >> "$LOG_FILE_PATH"
    touch "$DATA_DIR/.error-flag"
    exit 1
  fi
  echo 'Starting MetaDB Sync Task (source: sensor)' >> "$LOG_FILE_PATH"
  if [ "$FORCE_RUN" = "true" ]; then
    exec sudo -E -u metadb /usr/bin/metadb sync -D "$DATA_DIR" --source sensor --force 2>&1 | cat >> "$LOG_FILE_PATH"
  else
    exec sudo -E -u metadb /usr/bin/metadb sync -D "$DATA_DIR" --source sensor 2>&1 | cat >> "$LOG_FILE_PATH"
  fi
  echo 'MetaDB Sync Complete! Running MetaDB with METADB_RUN_MODE variable set to "endsync".' >> "$LOG_FILE_PATH"
  METADB_RUN_MODE="endsync"
fi

if [ "$METADB_RUN_MODE" = "endsync" ]; then
  echo 'Starting MetaDB Endsync Task (source: sensor)' >> "$LOG_FILE_PATH"
  if [ "$FORCE_RUN" = "true" ]; then
    exec sudo -E -u metadb /usr/bin/metadb endsync -D "$DATA_DIR" --source sensor --force 2>&1 | cat >> "$LOG_FILE_PATH"
  else
    exec sudo -E -u metadb /usr/bin/metadb endsync -D "$DATA_DIR" --source sensor 2>&1 | cat >> "$LOG_FILE_PATH"
  fi
  echo 'MetaDB Endsync Complete! Running MetaDB with METADB_RUN_MODE variable set to "start". Recommended to change the METADB_RUN_MODE variable value to "start" and restarting the container when convenient.' >> "$LOG_FILE_PATH"
  METADB_RUN_MODE="start"
fi

if [ "$METADB_RUN_MODE" = "migrate" ]; then
  echo "Starting MetaDB migration from LDP using configuration file ${LDP_CONF_FILE_PATH}." >> "$LOG_FILE_PATH"
  exec sudo -E -u metadb /usr/bin/metadb migrate -D "$DATA_DIR" --ldpconf "$LDP_CONF_FILE_PATH" --source sensor 2>&1 | cat >> "$LOG_FILE_PATH"
  echo 'MetaDB migration from LDP complete. Running MetaDB with METADB_RUN_MODE variable set to "start". Recommended to change the METADB_RUN_MODE variable value to "start" and restarting the container when convenient.' >> "$LOG_FILE_PATH"
  METADB_RUN_MODE="start"
fi

if [ "$METADB_RUN_MODE" = "start" ]; then
  echo 'Starting MetaDB Instance' >> "$LOG_FILE_PATH"
  if [ "$VERBOSE_LOGGING" = "true" ]; then
    exec sudo -E -u metadb /usr/bin/metadb start -D "$DATA_DIR" -l "$LOG_FILE_PATH" --port $METADB_PORT --debug --memlimit $MEM_LIMIT_GB
  fi
  if [ "$VERBOSE_LOGGING" = "false" ]; then
    exec sudo -E -u metadb /usr/bin/metadb start -D "$DATA_DIR" -l "$LOG_FILE_PATH" --port $METADB_PORT --memlimit $MEM_LIMIT_GB
  fi
fi

if ! [ "$ORIGINAL_METADB_RUN_MODE" = "start" ]; then
  echo "MetaDB exited unexpectedly with the METADB_RUN_MODE not set to 'start'. Setting error flag at $DATA_DIR/.error-flag" >> "$LOG_FILE_PATH"
  touch "$DATA_DIR/.error-flag"
fi

